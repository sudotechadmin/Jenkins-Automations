#An infrastructure pipeline in Jenkins applies Infrastructure as Code (IaC) practices to automate provisioning, updating, testing, and destroying 
#cloud infrastructure using tools like Terraform. This pattern enables complete, version-controlled infrastructure rollouts as part of CI/CD workflows.

#Typical Jenkins Infrastructure Pipeline Features
#Checkout of IaC source code (Terraform, Ansible, ARM, etc.)

#Terraform Init/Validate/Plan for configuration checks and previews

#Manual Approval before mutating infrastructure in production

# Terraform Apply/Destroy for resource creation and teardown

# Parameterized Actions (apply/destroy based on user input)

# Notification and artifact archiving after important stages
#Example Jenkinsfile for Terraform Infrastructure:-
pipeline {
  agent any
  parameters {
    choice(name: 'action', choices: ['apply', 'destroy'], description: 'Terraform Action')
  }
  environment {
    TF_VAR_region = 'us-east-1'
    AWS_CREDENTIALS = credentials('aws-iam-creds')
  }
  stages {
    stage('Checkout') {
      steps {
        git 'https://github.com/your-org/terraform-infra.git'
      }
    }
    stage('Init') {
      steps {
        sh 'terraform init'
      }
    }
    stage('Validate') {
      steps {
        sh 'terraform validate'
      }
    }
    stage('Plan') {
      steps {
        sh "terraform plan -out=tfplan"
        archiveArtifacts artifacts: 'tfplan', onlyIfSuccessful: true
      }
    }
    stage('Approval') {
      when {
        expression { params.action == 'apply' }
      }
      steps {
        timeout(time: 10, unit: 'MINUTES') {
          input message: 'Approve deployment?'
        }
      }
    }
    stage('Infra Action') {
      steps {
        sh "terraform ${params.action} --auto-approve"
      }
    }
  }
  post {
    success {
      echo "Infrastructure ${params.action} completed successfully"
    }
    failure {
      echo "Infrastructure operation failed"
    }
  }
}
